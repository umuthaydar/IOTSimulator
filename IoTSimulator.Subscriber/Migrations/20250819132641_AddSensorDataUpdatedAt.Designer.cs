// <auto-generated />
using System;
using IoTSimulator.Subscriber.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IoTSimulator.Subscriber.Migrations
{
    [DbContext(typeof(IoTDbContext))]
    [Migration("20250819132641_AddSensorDataUpdatedAt")]
    partial class AddSensorDataUpdatedAt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IoTSimulator.Subscriber.Domain.Models.House", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_House_CreatedAt");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Houses_Name");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_House_UpdatedAt");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("IoTSimulator.Subscriber.Domain.Models.IoTDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_IoTDevice_CreatedAt");

                    b.HasIndex("DeviceType")
                        .HasDatabaseName("IX_IoTDevices_DeviceType");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_IoTDevices_IsActive");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_IoTDevices_RoomId");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_IoTDevices_SerialNumber")
                        .HasFilter("\"SerialNumber\" IS NOT NULL");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_IoTDevice_UpdatedAt");

                    b.ToTable("IoTDevices");
                });

            modelBuilder.Entity("IoTSimulator.Subscriber.Domain.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("HouseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Room_CreatedAt");

                    b.HasIndex("HouseId")
                        .HasDatabaseName("IX_Rooms_HouseId");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Room_UpdatedAt");

                    b.HasIndex("HouseId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Rooms_HouseId_Name");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("IoTSimulator.Subscriber.Domain.Models.SensorData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Humidity")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("SensorId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SensorName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double?>("Temperature")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_SensorData_CreatedAt");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("IX_SensorData_DeviceId");

                    b.HasIndex("SensorId")
                        .HasDatabaseName("IX_SensorData_SensorId");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_SensorData_Timestamp");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_SensorData_UpdatedAt");

                    b.HasIndex("DeviceId", "Timestamp")
                        .HasDatabaseName("IX_SensorData_DeviceId_Timestamp");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("IoTSimulator.Subscriber.Domain.Models.IoTDevice", b =>
                {
                    b.HasOne("IoTSimulator.Subscriber.Domain.Models.Room", "Room")
                        .WithMany("Devices")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Room");
                });

            modelBuilder.Entity("IoTSimulator.Subscriber.Domain.Models.Room", b =>
                {
                    b.HasOne("IoTSimulator.Subscriber.Domain.Models.House", "House")
                        .WithMany("Rooms")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");
                });

            modelBuilder.Entity("IoTSimulator.Subscriber.Domain.Models.SensorData", b =>
                {
                    b.HasOne("IoTSimulator.Subscriber.Domain.Models.IoTDevice", "Device")
                        .WithMany("SensorDataList")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("IoTSimulator.Subscriber.Domain.Models.House", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("IoTSimulator.Subscriber.Domain.Models.IoTDevice", b =>
                {
                    b.Navigation("SensorDataList");
                });

            modelBuilder.Entity("IoTSimulator.Subscriber.Domain.Models.Room", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
